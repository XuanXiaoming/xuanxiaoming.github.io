<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>宣晓明的个人博客</title>
  
  <subtitle>晓明的记事本</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xuanxiaoming.info/"/>
  <updated>2022-03-01T19:27:19.244Z</updated>
  <id>https://xuanxiaoming.info/</id>
  
  <author>
    <name>宣晓明</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用picgo+jsDelivr提升博客图片载入速度</title>
    <link href="https://xuanxiaoming.info/2020/07/29/%E4%BD%BF%E7%94%A8picgo-jsdelivr%E6%8F%90%E5%8D%87%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E8%BD%BD%E5%85%A5%E9%80%9F%E5%BA%A6"/>
    <id>https://xuanxiaoming.info/2020/07/29/%E4%BD%BF%E7%94%A8picgo-jsdelivr%E6%8F%90%E5%8D%87%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E8%BD%BD%E5%85%A5%E9%80%9F%E5%BA%A6</id>
    <published>2020-07-29T15:20:41.000Z</published>
    <updated>2022-03-01T19:27:19.244Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>很长时间没有来写博客了，最近一直在忙找工作和考研的事，有空也会刷些leetcode，每天生活都过于充实，疏忽了写博客。哎,慢慢补吧。</p></blockquote><p>我这个博客自建立以来就一直有个诟病，加载太慢，起初我以为是挂在github的原因，所以我开了全站加速，其实效果并不是那么好（当然我并不是说毫无影响，事实证明如果我把博客挂在码云上所有的问题都解决了）。排查了一些问题后，发现对加载速度影响最大的是图片的加载，所以我就一直在找解决办法，直到我无意中在知乎上看到了jsDelivr这个CDN。</p><p>我要做的事很简单，在写markdown的软件typora上配置picgo的使用，然后让图片上传到仓库中，获得到URL再改为jsDelivr的加载链接，最后直接替换原博客图片链接就可以了，接下来配上图再详细说一遍。</p><p>首先打开GitHub创建一个公共仓库存储图片，然后到个人设置的开发者设置那里生成一个token，这里的token只会出现一次，所以先复制保存下来。</p><p><img src="https://cdn.jsdelivr.net/gh/XuanXiaoming/picRepository@master/img/20200805152422.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/XuanXiaoming/picRepository@master/img/20200805152451.png" alt></p><p>然后到typora中配置picgo，当然也可以使用picgo-core，配置都比较简单这里就不赘述了，网上一搜一大堆。</p><p><img src="https://cdn.jsdelivr.net/gh/XuanXiaoming/picRepository@master/img/20200805153019.png" alt></p><p>把typora设置好后在到picgo里修改下图床设置，token项就是刚才复制保存的那个。存储路径就是将图片保存到仓库的指定路径下。</p><p>自定义域名这里需要注意一下，因为一会要修改成使用jsdelivr代理，所以填入<code>https://cdn.jsdelivr.net/gh/你的仓库名@master</code></p><p><img src="https://cdn.jsdelivr.net/gh/XuanXiaoming/picRepository@master/img/20200805153252.png" alt></p><p>为了方便使用和避免文件名重复，我还在picgo中开启了如下选项</p><p><img src="https://cdn.jsdelivr.net/gh/XuanXiaoming/picRepository@master/img/20200805154042.png" alt></p><p>在typora中上传完图片后，一般会直接替换掉图片的URL，如果是文章的头图之类的非markdown语法的图片链接，直接粘贴刚才自动复制的URL替换即可。</p><p>接下来就可以愉快的写博客了！！！</p><blockquote><p>经过我的实际测试使用jsDelivr代理后的图片的加载速度得到了飞速的提升，我这篇博客就加了很多图片，你们可以试试加载速度。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;很长时间没有来写博客了，最近一直在忙找工作和考研的事，有空也会刷些leetcode，每天生活都过于充实，疏忽了写博客。哎,慢慢补吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我这个博客自建立以来就一直有个诟病，加载太慢，起初我以为是挂在githu
      
    
    </summary>
    
    
    
      <category term="-博客搭建" scheme="https://xuanxiaoming.info/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建填坑记录 二</title>
    <link href="https://xuanxiaoming.info/2020/03/04/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%A1%AB%E5%9D%91%E8%AE%B0%E5%BD%95%E4%BA%8C"/>
    <id>https://xuanxiaoming.info/2020/03/04/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%A1%AB%E5%9D%91%E8%AE%B0%E5%BD%95%E4%BA%8C</id>
    <published>2020-03-04T11:26:52.000Z</published>
    <updated>2022-03-01T19:27:19.246Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在博客的维护和更新过程中我遇到了很多琐碎的小问题，我决定新建立一篇文章，用于记录这些小问题和解决办法。<br>由于内容过于琐碎，所以我就直接列表记录了，他们之间并无逻辑关联。 </p></blockquote><br> <blockquote><p><font style="font-size:120%"> <strong>修改首页左侧导航栏列表循序</strong>  </font></p></blockquote><p>我发现主题的创建者只将归档(archive)这个页面单独做了处理，而我新加入的页面直接是对<code>site.pages</code>这个变量做了一个遍历，这导致我无法控制列表的排布，显得很乱，所以我最终的解决方案是直接将中间这段代码注释掉，将<code>&lt;a&gt;</code>标签内容写了进去，很简单粗暴的解决办法。  </p><pre><code>&lt;% if (theme.archives) &#123; %&gt;&lt;a class=&quot;a-block no-tint nav-link-item &lt;%= is_current(&apos;archives&apos;) &amp;&amp; &apos;active&apos; %&gt;&quot; href=&quot;&lt;%= config.root + &quot;archives&quot; %&gt;&quot;&gt;    &lt;%= __(&apos;Archive&apos;) %&gt;&lt;/a&gt;&lt;% &#125; %&gt;&lt;% if(site.pages)&#123; %&gt;&lt;% site.pages.each(function (page)&#123; %&gt;&lt;a class=&quot;a-block nav-link-item &lt;%= is_current(page.path) &amp;&amp; &apos;active&apos; %&gt;&quot; href=&quot;&lt;%= config.root + page.path %&gt;&quot;&gt;    &lt;%= page.title %&gt;&lt;/a&gt;&lt;% &#125;);&#125; %&gt;&lt;% if (theme.rss) &#123; %&gt;&lt;a class=&quot;a-block no-tint nav-link-item&quot; href=&quot;&lt;%= config.root + theme.rss %&gt;&quot;&gt;    &lt;%= __(&apos;RSS&apos;) %&gt;&lt;/a&gt;&lt;% &#125; %&gt;  </code></pre><p>之后我又发现PC网页上的导航顺序没问题了，但是移动端的页面列表循序还是乱的，在仔细核查了主题作者的代码后，我终于在另一个文件中找到了，为了方便以后修改，我在此记录一下。 </p><pre><code>side_nav.ejs —— PC端的导航模块single_column_head.ejs —— 移动端的导航模块  </code></pre><br><blockquote><p><font style="font-size:120%"> <strong>SSL证书申请，配置强制跳转https</strong> </font>  </p></blockquote><p>这块是这样的， 我上次在阿里云注册https的时候， 阿里云那边出了bug， 就是SSL证书那块我一直申请不下来（阿里云的免费SSL）， 点不动那个按钮， 所以就一直用http访问到现在， 这次我上阿里云的控制面板试探性的点了一下，发现这个可以申请了， 然后我就把https给配置好了。 为什么我一直要配置https呢，因为现在的浏览器，比如Safari、Chrome，他们都会把非https的连接标记为非安全连接，实际上你作为建站人你自己是知道的，就是一个博客而已什么也没干，但是这块就是让人很憋屈。  </p><p>配置完这个https之后，我平时访问的时候，我发现还是会有http的访问，起初我以为是浏览器缓存的问题，但是并不是这样，后来我改了很多东西，甚至怀疑到了CNAME这个文件上，现在想想真是可笑至极。最后这个问题我在阿里云的全站加速的配置里找到了。如图所示，修改下强制跳转就行。  </p><p><img src="https://cdn.jsdelivr.net/gh/XuanXiaoming/picRepository@master/img/20200728181809.png" alt="强制跳转">  </p><br><blockquote><p><font style="font-size:120%"> <strong>CNAME文件与hexo忽略文件</strong> </font>  </p></blockquote><p>这个文件是做什么的，我就不说了，直接网上查一下就有。它在github中的作用是告诉gitHub page服务你的自定义域名是什么，顾名思义，这个文件里面填的就是你的域名，没别的了。</p><p>在和hexo连用的时候我发现一个问题，当我执行<code>hexo clean</code>命令后，会将public文件夹下的文件全部删除，包括CNAME。这时候有两种解决办法，一是将CNAME文件放到source文件夹下，这样在<code>hexo g</code>后会将该文件原封不动copy到public文件夹下，避免了clean的删除。二是在hexo的全局配置文件里加入忽略文件（hexo会默认忽略“.”开头的和隐藏的文件）</p><p><img src="https://cdn.jsdelivr.net/gh/XuanXiaoming/picRepository@master/img/20200728181741.png" alt="hexoConfig">  </p><p>举例：  </p><pre><code># Include/Exclude Files/Foldersinclude:    - &quot;.nojekyll&quot;    # 包括 &apos;source/css/_typing.css&apos;    - &quot;css/_typing.css&quot;    # 包括 &apos;source/_css/&apos; 中的任何文件，但不包括子目录及其其中的文件。    - &quot;_css/*&quot;    # 包含 &apos;source/_css/&apos; 中的任何文件和子目录下的任何文件    - &quot;_css/**/*&quot;exclude:    # 不包括 &apos;source/js/test.js&apos;    - &quot;js/test.js&quot;    # 不包括 &apos;source/js/&apos; 中的文件、但包括子目录下的所有目录和文件    - &quot;js/*&quot;    # 不包括 &apos;source/js/&apos; 中的文件和子目录下的任何文件    - &quot;js/**/*&quot;    # 不包括 &apos;source/js/&apos; 目录下的所有文件名以 &apos;test&apos; 开头的文件，但包括其它文件和子目录下的单文件    - &quot;js/test*&quot;    # 不包括 &apos;source/js/&apos; 及其子目录中任何以 &apos;test&apos; 开头的文件    - &quot;js/**/test*&quot;    # 不要用 exclude 来忽略 &apos;source/_posts/&apos; 中的文件。你应该使用 &apos;skip_render&apos;，或者在要忽略的文件的文件名之前加一个下划线 &apos;_&apos;    # 在这里配置一个 - &quot;_posts/hello-world.md&quot; 是没有用的。ignore:    # Ignore any folder named &apos;foo&apos;.    - &quot;**/foo&quot;    # Ignore &apos;foo&apos; folder in &apos;themes/&apos; only.    - &quot;**/themes/*/foo&quot;    # Same as above, but applies to every subfolders of &apos;themes/&apos;.    - &quot;**/themes/**/foo&quot;</code></pre><p> 我用的是第一种方法解决的，第二种方法我没试，不过官方文档里都写了，所以也是一种合格的解决办法。</p><br><blockquote><p><font style="font-size:120%"> <strong>创建标签页</strong> </font>  </p></blockquote><p>主题作者只写了按时间归档的页面，标签页并没有写，甚至在使用文档里也没有说明（这个说明文档非常的简陋，issue里面一片哀嚎），但是hexo是自己支持标签分类的，我们只需要稍加配置一下即可。</p><p><a href="https://github.com/SumiMakito/hexo-theme-Journal/issues/20#issuecomment-551090136">参考这篇issue里面AmazingRise的回答</a>：  </p><p><img src="https://cdn.jsdelivr.net/gh/XuanXiaoming/picRepository@master/img/20200728203823.png" alt="标签页配置">  </p><br><blockquote><p><font style="font-size:120%"> <strong>SEO优化</strong> </font>  </p></blockquote><p>参考这篇博文 –&gt; <a href="https://hoxis.github.io/Hexo+Next%20SEO%E4%BC%98%E5%8C%96.html">Hexo博客Next主题SEO优化方法</a>  </p><p>说的很详细，我就不赘述了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在博客的维护和更新过程中我遇到了很多琐碎的小问题，我决定新建立一篇文章，用于记录这些小问题和解决办法。&lt;br&gt;由于内容过于琐碎，所以我就直接列表记录了，他们之间并无逻辑关联。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt; 

&lt;blockquot
      
    
    </summary>
    
    
    
      <category term="博客搭建" scheme="https://xuanxiaoming.info/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建填坑记录</title>
    <link href="https://xuanxiaoming.info/2020/01/13/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%A1%AB%E5%9D%91%E8%AE%B0%E5%BD%95"/>
    <id>https://xuanxiaoming.info/2020/01/13/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%A1%AB%E5%9D%91%E8%AE%B0%E5%BD%95</id>
    <published>2020-01-12T16:59:19.000Z</published>
    <updated>2022-03-01T19:27:19.228Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写文章前我决定先copy一份markdown的语法来，实在是忘了 = =！</p></blockquote><p>折腾了两天，总算是把博客弄好了，对于我这个懒人来说真是不容易，希望以后能抽空写写博客，毕竟生活中还是有不少事是值得记录的。</p><p>之前使用的博客是基于Jekyll+Gitment搭建的，用的主题是一个前端老哥写的H2O theme，可能有些人也知道吧，真的是很好看的主题，尤其是随着时间变换主题色这个功能我是太喜欢了，晚上看博文不刺眼了（明明没有人看）。但是奔着人活着就是为了折腾，这次我决定用Hexo+Valine来搭建新的博客（其实我就是看上了新主题）</p><p><strong>先附上之前博客的主题样式:</strong><br>白天：<br><img src="https://cdn.jsdelivr.net/gh/XuanXiaoming/picRepository@master/img/20200728204311.png" alt="H2OThemeDay"><br>晚上：<br><img src="https://cdn.jsdelivr.net/gh/XuanXiaoming/picRepository@master/img/20200728204326.png" alt="H2OThemeNight"> </p><p><strong>新的博客的样式：</strong><br><img src="https://cdn.jsdelivr.net/gh/XuanXiaoming/picRepository@master/img/20200728204350.png" alt="JournalTheme">  </p><hr><p>还有一点也是推动我换框架的原因，之前用的Gitment在登录GitHub账号的时候总是会出问题，会弹出<code>[object XMLHttpRequestProgressEvent]</code>这样的错误，具体原因不是很明白。其次是咱国内的网络登录github的速度实在是一言难尽，我希望我的博客并不只服务于我们这些技术人，还有我一些生活上的朋友，让他们为了能给我留言评论还得大费周章的去注册个GitHub账号，实在是有些不妥。  </p><p>于是在朋友的推荐下，我决定使用一个特别好用的匿名评论插件Valine，Valine用的是一个叫LeanCloud的云数据库存储博客评论内容，因为我国法律的原因，所以我注册的是LeanCloud的国际版。</p><p>有了Hexo+Valine，博客基本的东西都OK了，于是我启动GitHub Pages服务，尝试访问。</p><p>正如我之前所说，国内的网络环境访问GitHub还是很慢的。这时候强迫症就上来了，我既然折腾到现在了，不如继续折腾下去吧，于是我打开阿里云准备开个全站加速，这东西我是第一次弄，之前完全没用到过，弄了半天才明白我还得买个域名。行嘛！我买还不行吗！于是买了个便宜的 <a href="https://xuanxiaoming.info/">xuanxiaoming.info</a>，看起来还不错，哈哈。</p><blockquote><p>这里有个小插曲。因为是个人博客嘛，我本来是很想注册xuanxiaoming.me这个域名的，这个域名我当时只查到了在GoDaddy这个网站上购买，而这个网站的注册简直让我崩溃，它并不是及时注册成功的，差不多十几个小时后我才收到邮件说注册成功了，那个时候我所有的后续配置都已经做完还睡了一觉。。。</p></blockquote><p>后来我发现了一个网站<a href="https://www.domcomp.com/">简化域名注册</a>，收罗了很多域名销售商，可以直接查出最便宜的购买点（包括了后续续费的价格），如果我再想买xuanxiaoming.me这个域名的话，我一定会去porkbun.com上购买。</p><p>扯得远了，域名买过后开始折腾起全站加速。懒得写大段文字了，直接看图吧，按红笔标的做就OK。</p><p><img src="https://cdn.jsdelivr.net/gh/XuanXiaoming/picRepository@master/img/20200728204615.jpeg" alt="全站加速配置"></p><p>全站加速配置完后列表页会给你一个CNAME值，将其填入域名解析的记录值中，保存，等一个TTL时间就好了。</p><p>开了全站加速后，我自己测试大概1~2秒就访问完成，确实快了很多。</p><p>最后我想再聊一聊感悟，这次博客搭建比我想象中要轻松一点，可能是因为踩过了Jekyll的坑，虽然有些不同，但简单看看就明白了，主要的时间都花费在博客功能配置和站点访问优化上了，所以现在赶紧记录下来既帮助自己又帮助别人。</p><blockquote><p>目前博客正在积极装修中，还有些旧的博文，我会慢慢搬运过来，期待一下以后的样子。<br>感谢你阅读到这！<br><img src="https://cdn.jsdelivr.net/gh/XuanXiaoming/picRepository@master/img/20200728204631.jpg" alt="嘿嘿"></p></blockquote>]]></content>
    
    <summary type="html">
    
      趁博客搭好之际，赶紧记录下过程
    
    </summary>
    
    
    
      <category term="博客搭建" scheme="https://xuanxiaoming.info/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="https://xuanxiaoming.info/2020/01/12/markdown-%E8%AF%AD%E6%B3%95"/>
    <id>https://xuanxiaoming.info/2020/01/12/markdown-%E8%AF%AD%E6%B3%95</id>
    <published>2020-01-12T08:17:20.000Z</published>
    <updated>2022-03-01T19:27:19.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-标题"><a href="#1-标题" class="headerlink" title="1 标题"></a>1 标题</h1><p>两种形式：  </p><p>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题   "></a>一级标题   </h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></blockquote><p>2）使用<code>#</code>，可表示1-6级标题。</p><blockquote><p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题    </p></blockquote><p>效果：</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><hr><h1 id="2-段落"><a href="#2-段落" class="headerlink" title="2 段落"></a>2 段落</h1><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><hr><h1 id="3-区块引用"><a href="#3-区块引用" class="headerlink" title="3 区块引用"></a>3 区块引用</h1><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p><blockquote><p>&gt; 区块引用<br>&gt;&gt; 嵌套引用  </p></blockquote><p>效果：</p><blockquote><p>区块引用  </p><blockquote><p>嵌套引用</p></blockquote></blockquote><hr><h1 id="4-代码区块"><a href="#4-代码区块" class="headerlink" title="4 代码区块"></a>4 代码区块</h1><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}    </p><p>代码区块：</p><pre><code>void main()&#123;    printf(&quot;Hello, Markdown.&quot;);&#125;</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><hr><h1 id="5-强调"><a href="#5-强调" class="headerlink" title="5 强调"></a>5 强调</h1><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p>*斜体*，_斜体_<br>**粗体**，__粗体__</p></blockquote><p>效果：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><hr><h1 id="6-列表"><a href="#6-列表" class="headerlink" title="6 列表"></a>6 列表</h1><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格<em>或</em>制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p><blockquote><p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p></blockquote><p>效果：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><hr><h1 id="7-分割线"><a href="#7-分割线" class="headerlink" title="7 分割线"></a>7 分割线</h1><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><hr><h1 id="8-链接"><a href="#8-链接" class="headerlink" title="8 链接"></a>8 链接</h1><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p><blockquote><p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https://github.com/younghz/Markdown">younghz的Markdown库</a>。</p></blockquote><p><strong>参考式</strong>：</p><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”    </p></blockquote><p>效果：</p><blockquote><p><a href="https://github.com/younghz/Markdown">younghz的Markdown库1</a><br><a href="https://github.com/younghz/Markdown">younghz的Markdown库2</a></p></blockquote><p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><hr><h1 id="9-图片"><a href="#9-图片" class="headerlink" title="9 图片"></a>9 图片</h1><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。  </p><hr><h1 id="10-反斜杠"><a href="#10-反斜杠" class="headerlink" title="10 反斜杠\"></a>10 反斜杠<code>\</code></h1><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。  </p><hr><h1 id="11-符号’-’"><a href="#11-符号’-’" class="headerlink" title="11 符号’`’"></a>11 符号’`’</h1><p>起到标记作用。如：</p><blockquote><p>`ctrl+a`</p></blockquote><p>效果：</p><blockquote><p><code>ctrl+a</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      copy来的语法知识，忘了就看看
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Mybatis Generator配置解析</title>
    <link href="https://xuanxiaoming.info/2018/08/01/Mybatis%20Generator%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90"/>
    <id>https://xuanxiaoming.info/2018/08/01/Mybatis%20Generator%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90</id>
    <published>2018-07-31T18:03:37.000Z</published>
    <updated>2022-03-01T19:27:19.226Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章我想简单分析一下generatorConfig.xml这个配置文件的结构    </p><p>本篇文章参考 <a href="https://www.jianshu.com/p/e09d2370b796">简书——叩丁狼教育</a> 和 <a href="https://www.cnblogs.com/GaiDynasty/p/4088531.html">博客——改着名儿玩</a></p><p>我们先对这个配置文件做一个拆分，看看具体包含哪些东西（可以参考上一篇博客结尾代码）</p><pre><code>classPathEntry 加载类(比如jdbc驱动物理位置)  generatorConfiguration 配置器    - context 生成一组对象环境           -  jdbcConnection         数据库连接配置          -  javaModelGenerator     model (domain)配置          -  sqlMapGenerator        mapper配置          -  javaClientGenerator    dao配置          -  table                  表结构  </code></pre><p>根据上面的内容，就可以搭出来一个generatorConfig.xml的基本骨架了  </p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;  &lt;generatorConfiguration&gt;        &lt;classPathEntry  location=&quot;jdbc驱动位置&quot;/&gt;        &lt;context id=&quot;MysqlContext&quot; targetRuntime=&quot;MyBatis3Simple&quot; defaultModelType=&quot;flat&quot;&gt;            &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;                            connectionURL=&quot;jdbc:mysql://localhost:3306/数据库名&quot;                            userId=&quot;root&quot;                            password=&quot;root&quot;&gt;            &lt;/jdbcConnection&gt;            &lt;javaModelGenerator targetPackage=&quot;test.model&quot;                             targetProject=&quot;model生成的位置&quot;&gt;            &lt;/javaModelGenerator&gt;            &lt;sqlMapGenerator targetPackage=&quot;test.xml&quot;                             targetProject=&quot;mapper生成的位置&quot;&gt;            &lt;/sqlMapGenerator&gt;            &lt;javaClientGenerator type=&quot;ANNOTATEDMAPPER&quot;                             targetPackage=&quot;test.dao&quot;                             targetProject=&quot;dao层接口生成的位置&quot; /&gt;            &lt;table tableName=&quot;person&quot; &gt;                &lt;property name=&quot;id&quot; value=&quot;false&quot;/&gt;                &lt;!-- 其他字段 --&gt;            &lt;/table&gt;        &lt;/context&gt;&lt;/generatorConfiguration&gt;</code></pre><p>然后根据自己的需要再往里面添肉，一个适合你的generatorConfig.xml就完成了。  </p><p>比如我不想看它生成的注释，那我就加上  </p><pre><code>&lt;commentGenerator&gt;    &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot; /&gt;    &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;&lt;/commentGenerator&gt;</code></pre><p>要添肉的部分，叩丁狼教育的那篇简书里已经说的很详细了，这里就不再赘述。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章我想简单分析一下generatorConfig.xml这个配置文件的结构    &lt;/p&gt;
&lt;p&gt;本篇文章参考 &lt;a href=&quot;https://www.jianshu.com/p/e09d2370b796&quot;&gt;简书——叩丁狼教育&lt;/a&gt; 和 &lt;a href=&quot;http
      
    
    </summary>
    
    
    
      <category term="MyBatis" scheme="https://xuanxiaoming.info/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Gradle不支持MyBatis Generator怎么办</title>
    <link href="https://xuanxiaoming.info/2018/08/01/Gradle%E4%B8%8D%E6%94%AF%E6%8C%81MyBatis%20Generator%E6%80%8E%E4%B9%88%E5%8A%9E"/>
    <id>https://xuanxiaoming.info/2018/08/01/Gradle%E4%B8%8D%E6%94%AF%E6%8C%81MyBatis%20Generator%E6%80%8E%E4%B9%88%E5%8A%9E</id>
    <published>2018-07-31T17:21:45.000Z</published>
    <updated>2022-03-01T19:27:19.225Z</updated>
    
    <content type="html"><![CDATA[<p>第一次用Gradle做Mybatis的项目，一上手就发现了一个问题 —— <em>哎？MyBatis Generator的插件怎么下不下来</em>  </p><p>然后就上官网查了一下，官网是这么说的： </p><blockquote><p>MyBatis Generator (MBG) can be run in the following ways:  </p><ul><li>From the command prompt with an XML configuration  </li><li>As an Ant task with an XML configuration  </li><li>As a Maven Plugin  </li><li>From another Java program with an XML configuration  </li><li>From another Java program with a Java based configuration  </li><li>As an Eclipse Feature  </li></ul></blockquote><p>这么看来MyBatis Generator是不支持Gradle的，而官网提供的解决方案除了第一条，我觉得都很麻烦，那么就用第一种方案解决问题吧！  </p><p>根据官网上的描述，我们总共需要准备三样东西：  </p><ul><li>mybatis-generator-core.jar</li><li>mysql-connector-java.jar</li><li>generatorConfig.xml</li></ul><p>有关generatorConfig.xml的描述，我放在了后面。  </p><p>准备工作做完后，将这三个文件放在同一文件夹下，执行 <code>java -jar mybatis-generator-core-x.x.x.jar -configfile generatorConfig.xml</code>，就OK了，类似下图。<br><img src="https://cdn.jsdelivr.net/gh/XuanXiaoming/picRepository@master/img/20200728205335.png" alt="图片">  </p><p>我这里给generatorConfig.xml起名叫test.xml，生成在test文件夹里了，起名字随意。<br><img src="https://cdn.jsdelivr.net/gh/XuanXiaoming/picRepository@master/img/20200728205348.png" alt="图片">  </p><p><img src="https://cdn.jsdelivr.net/gh/XuanXiaoming/picRepository@master/img/20200728205401.png" alt="图片">  </p><p>为了防止我说的不够详细，有遗漏的地方，官网描述也放<a href="http://www.mybatis.org/generator/running/runningFromCmdLine.html">这里</a>  </p><p>最后，看一下generatorConfig.xml，这里为了让看博客的人看到这里能有个参考，我就直接把我自己写的test.xml贴出来了。想看更多的描述，稍后我会写一篇更详细的，不然东西都堆在这很乱。  </p><p>使用时请根据实际情况修改！</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt;    &lt;classPathEntry  location=&quot;mysql-connector-java-5.1.46.jar&quot;/&gt;      &lt;context id=&quot;MysqlContext&quot; targetRuntime=&quot;MyBatis3Simple&quot; defaultModelType=&quot;flat&quot;&gt;        &lt;property name=&quot;javaFormatter&quot; value=&quot;org.mybatis.generator.api.dom.DefaultJavaFormatter&quot;/&gt;        &lt;property name=&quot;xmlFormatter&quot; value=&quot;org.mybatis.generator.api.dom.DefaultXmlFormatter&quot;/&gt;        &lt;property name=&quot;beginningDelimiter&quot; value=&quot;`&quot; /&gt;        &lt;property name=&quot;endingDelimiter&quot; value=&quot;`&quot; /&gt;        &lt;commentGenerator&gt;            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot; /&gt;            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;        &lt;/commentGenerator&gt;        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;                        connectionURL=&quot;jdbc:mysql://localhost:3306/test2?useSSL=false&quot;                        userId=&quot;root&quot;                        password=&quot;root&quot;&gt;        &lt;/jdbcConnection&gt;        &lt;javaModelGenerator targetPackage=&quot;test.model&quot; targetProject=&quot;C:\Users\MYPC\Desktop\123&quot;&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;        &lt;/javaModelGenerator&gt;        &lt;sqlMapGenerator targetPackage=&quot;test.xml&quot; targetProject=&quot;C:\Users\MYPC\Desktop\123&quot;&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;        &lt;/sqlMapGenerator&gt;        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot;                              targetPackage=&quot;test.dao&quot;                              targetProject=&quot;C:\Users\MYPC\Desktop\123&quot; /&gt;        &lt;table tableName=&quot;person&quot; &gt;            &lt;property name=&quot;id&quot; value=&quot;false&quot;/&gt;            &lt;property name=&quot;name&quot; value=&quot;false&quot;/&gt;            &lt;property name=&quot;sex&quot; value=&quot;false&quot;/&gt;            &lt;property name=&quot;age&quot; value=&quot;false&quot;/&gt;            &lt;property name=&quot;birthday&quot; value=&quot;false&quot;/&gt;            &lt;property name=&quot;address&quot; value=&quot;false&quot;/&gt;        &lt;/table&gt;    &lt;/context&gt;&lt;/generatorConfiguration&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一次用Gradle做Mybatis的项目，一上手就发现了一个问题 —— &lt;em&gt;哎？MyBatis Generator的插件怎么下不下来&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;然后就上官网查了一下，官网是这么说的： &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MyBatis Gene
      
    
    </summary>
    
    
    
      <category term="MyBatis" scheme="https://xuanxiaoming.info/tags/mybatis/"/>
    
      <category term="Gradle" scheme="https://xuanxiaoming.info/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>如何让Outlook (office365)不再弹出“没有默认的邮件客户端”对话框？</title>
    <link href="https://xuanxiaoming.info/2018/07/17/%E5%BC%B9%E5%87%BA%E9%BB%98%E8%AE%A4%E9%82%AE%E4%BB%B6%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AF%B9%E8%AF%9D%E6%A1%86"/>
    <id>https://xuanxiaoming.info/2018/07/17/%E5%BC%B9%E5%87%BA%E9%BB%98%E8%AE%A4%E9%82%AE%E4%BB%B6%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AF%B9%E8%AF%9D%E6%A1%86</id>
    <published>2018-07-17T08:12:33.000Z</published>
    <updated>2022-03-01T19:27:19.247Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是一篇2018年我发布在知乎上的回答，这篇回答一直以来访问人数都很多且评论的人都给与一致的好评，所以我决定搬运到博客中来。</p></blockquote><p>我正好遇到这个问题，并且成功解决了，记下来帮助一下以后遇到问题的人。 </p><p>分析结果：</p><ul><li>触发这个弹窗的不是outlook程序，因为可能你和我一样已经把office 2016卸载了。 </li><li>也不是默认应用程序触发的弹窗。我把默认程序设置为邮件依旧弹窗。  </li><li>我在启动项里找到了office的lync，我不知道它从哪来的，但是也不是它，因为它没有运行。  </li><li>天知道我经历了什么…… 强迫症有时候真的会逼死人。  </li><li>最后当我看到service里的OneSyncSvc_sessionID服务项，答案就出来了。  </li></ul><div style="text-align: center"><img src="https://cdn.jsdelivr.net/gh/XuanXiaoming/picRepository@master/img/20200728205555.jpg"></div><br>    <p>解决办法（服务里没法直接关闭）：</p><ol><li><p>定位注册表到“HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services”下。</p></li><li><p>找到4项 “OneSyncSvc”“OneSyncSvc_sessionID”“UserDataSvc”“UserDataSvc_sessionID”</p></li><li><p>把每项里“Start”的值设为4，重启就能看到效果了。（0 引导，1 系统，2 自动-默认，3 手动，4 禁用）</p></li></ol><br>  <blockquote><p>如果这篇文章有帮助你解决问题，治好强迫症，你可以来知乎里给我点赞。<br><a href="https://www.zhihu.com/question/40217178/answer/407644015">如何让Outlook (office365)不再弹出“没有默认的邮件客户端”对话框？ - 拉格朗日的回答 - 知乎</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这是一篇2018年我发布在知乎上的回答，这篇回答一直以来访问人数都很多且评论的人都给与一致的好评，所以我决定搬运到博客中来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我正好遇到这个问题，并且成功解决了，记下来帮助一下以后遇到问题的人。 &lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="windows" scheme="https://xuanxiaoming.info/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>为什么我墙裂建议大家使用枚举来实现单例</title>
    <link href="https://xuanxiaoming.info/2018/06/15/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E5%A2%99%E8%A3%82%E5%BB%BA%E8%AE%AE%E5%A4%A7%E5%AE%B6%E4%BD%BF%E7%94%A8%E6%9E%9A%E4%B8%BE%E6%9D%A5%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B"/>
    <id>https://xuanxiaoming.info/2018/06/15/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E5%A2%99%E8%A3%82%E5%BB%BA%E8%AE%AE%E5%A4%A7%E5%AE%B6%E4%BD%BF%E7%94%A8%E6%9E%9A%E4%B8%BE%E6%9D%A5%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B</id>
    <published>2018-06-15T07:27:14.000Z</published>
    <updated>2022-03-01T19:27:19.243Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，单例模式，一般有七种写法，那么这七种写法中，最好的是哪一种呢？为什么呢？本文就来抽丝剥茧一下。  </p><h3 id="哪种写单例的方式最好"><a href="#哪种写单例的方式最好" class="headerlink" title="哪种写单例的方式最好"></a>哪种写单例的方式最好</h3><p>在StakcOverflow中，有一个关于<a href="https://stackoverflow.com/questions/70689/what-is-an-efficient-way-to-implement-a-singleton-pattern-in-java">What is an efficient way to implement a singleton pattern in Java?</a>的讨论：<br><img src="https://cdn.jsdelivr.net/gh/XuanXiaoming/picRepository@master/img/20200728205909.png" alt="201806170342"><br>如上图，得票率最高的回答是：使用枚举。<br>回答者引用了Joshua Bloch大神在《Effective Java》中明确表达过的观点：</p><blockquote><p>使用枚举实现单例的方法虽然还没有广泛采用，但是单元素的枚举类型已经成为实现Singleton的最佳方法。  </p></blockquote><p>如果你真的深入理解了单例的用法以及一些可能存在的坑的话，那么你也许也能得到相同的结论，那就是：使用枚举实现单例是一种很好的方法。  </p><h3 id="枚举单例写法简单"><a href="#枚举单例写法简单" class="headerlink" title="枚举单例写法简单"></a>枚举单例写法简单</h3><p>如果你看过<a href="http://www.hollischuang.com/archives/205">《单例模式的七种写法》</a>中的实现单例的所有方式的代码，那就会发现，各种方式实现单例的代码都比较复杂。主要原因是在考虑线程安全问题。  </p><p>我们简单对比下“双重校验锁”方式和枚举方式实现单例的代码。  </p><p>“双重校验锁”实现单例：  </p><pre><code>public class Singleton &#123;      private volatile static Singleton singleton;      private Singleton ()&#123;&#125;      public static Singleton getSingleton() &#123;      if (singleton == null) &#123;          synchronized (Singleton.class) &#123;          if (singleton == null) &#123;              singleton = new Singleton();          &#125;          &#125;      &#125;      return singleton;      &#125;  &#125;  </code></pre><p>枚举实现单例：  </p><pre><code>public enum Singleton &#123;      INSTANCE;      public void whateverMethod() &#123;      &#125;  &#125;  </code></pre><p>相比之下，你就会发现，枚举实现单例的代码会精简很多。  </p><p>上面的双重锁校验的代码之所以很臃肿，是因为大部分代码都是在保证线程安全。为了在保证线程安全和锁粒度之间做权衡，代码难免会写的复杂些。但是，这段代码还是有问题的，因为他无法解决反序列化会破坏单例的问题。  </p><h3 id="枚举可解决线程安全问题"><a href="#枚举可解决线程安全问题" class="headerlink" title="枚举可解决线程安全问题"></a>枚举可解决线程安全问题</h3><p>上面提到过。使用非枚举的方式实现单例，都要自己来保证线程安全，所以，这就导致其他方法必然是比较臃肿的。那么，为什么使用枚举就不需要解决线程安全问题呢？  </p><p>其实，并不是使用枚举就不需要保证线程安全，只不过线程安全的保证不需要我们关心而已。也就是说，其实在“底层”还是做了线程安全方面的保证的。  </p><p>那么，“底层”到底指的是什么？  </p><p>这就要说到关于枚举的实现了。这部分内容可以参考我的另外一篇博文<a href="http://www.hollischuang.com/archives/197">深度分析Java的枚举类型—-枚举的线程安全性及序列化问题</a>，这里我简单说明一下：  </p><p>定义枚举时使用<code>enum</code>和class一样，是Java中的一个关键字。就像class对应用一个Class类一样，<code>enum</code>也对应有一个<code>Enum</code>类。  </p><p>通过将定义好的枚举<a href="http://www.hollischuang.com/archives/58">反编译</a>，我们就能发现，其实枚举在经过<code>javac</code>的编译之后，会被转换成形如<code>public final class T extends Enum</code>的定义。  </p><p>而且，枚举中的各个枚举项同事通过<code>static</code>来定义的。如：   </p><pre><code>public enum T &#123;    SPRING,SUMMER,AUTUMN,WINTER;&#125;    </code></pre><p>反编译后代码为：  </p><pre><code>public final class T extends Enum &#123;    //省略部分内容    public static final T SPRING;    public static final T SUMMER;    public static final T AUTUMN;    public static final T WINTER;    private static final T ENUM$VALUES[];    static    &#123;        SPRING = new T(&quot;SPRING&quot;, 0);        SUMMER = new T(&quot;SUMMER&quot;, 1);        AUTUMN = new T(&quot;AUTUMN&quot;, 2);        WINTER = new T(&quot;WINTER&quot;, 3);        ENUM$VALUES = (new T[] &#123;            SPRING, SUMMER, AUTUMN, WINTER        &#125;);    &#125;&#125;  </code></pre><p>了解JVM的类加载机制的朋友应该对这部分比较清楚。<code>static</code>类型的属性会在类被加载之后被初始化，我们在<a href="http://www.hollischuang.com/archives/199">深度分析Java的ClassLoader机制（源码级别）</a>和<a href="http://www.hollischuang.com/archives/201">Java类的加载、链接和初始化</a>两个文章中分别介绍过，当一个Java类第一次被真正使用到的时候静态资源被初始化、Java类的加载和初始化过程都是线程安全的（因为虚拟机在加载枚举的类的时候，会使用<code>ClassLoader</code>的<code>loadClass</code>方法，而这个方法使用同步代码块保证了线程安全）。所以，创建一个<code>enum</code>类型是线程安全的。  </p><p>也就是说，我们定义的一个枚举，在第一次被真正用到的时候，会被虚拟机加载并初始化，而这个初始化过程是线程安全的。而我们知道，解决单例的并发问题，主要解决的就是初始化过程中的线程安全问题。  </p><p>所以，由于枚举的以上特性，枚举实现的单例是天生线程安全的。  </p><h3 id="枚举可解决反序列化会破坏单例的问题"><a href="#枚举可解决反序列化会破坏单例的问题" class="headerlink" title="枚举可解决反序列化会破坏单例的问题"></a>枚举可解决反序列化会破坏单例的问题</h3><p>前面我们提到过，就是使用双重校验锁实现的单例其实是存在一定问题的，就是这种单例有可能被序列化锁破坏，关于这种破坏及解决办法，参看<a href="http://www.hollischuang.com/archives/1144">单例与序列化的那些事儿</a>，这里不做更加详细的说明了。</p><p>那么，对于序列化这件事情，为什么枚举又有先天的优势了呢？答案可以在<a href="https://docs.oracle.com/javase/7/docs/platform/serialization/spec/serial-arch.html#6469">Java Object Serialization Specification</a>中找到答案。其中专门对枚举的序列化做了如下规定：<br><img src="https://cdn.jsdelivr.net/gh/XuanXiaoming/picRepository@master/img/20200728205847.png" alt="201806170400">   </p><p>大概意思就是：在序列化的时候Java仅仅是将枚举对象的name属性输出到结果中，反序列化的时候则是通过<code>java.lang.Enum</code>的<code>valueOf</code>方法来根据名字查找枚举对象。同时，编译器是不允许任何对这种序列化机制的定制的，因此禁用了<code>writeObject</code>、<code>readObject</code>、<code>readObjectNoData</code>、<code>writeReplace</code>和<code>readResolve</code>等方法。</p><p>普通的Java类的反序列化过程中，会通过反射调用类的默认构造函数来初始化对象。所以，即使单例中构造函数是私有的，也会被反射给破坏掉。由于反序列化后的对象是重新new出来的，所以这就破坏了单例。</p><p>但是，枚举的反序列化并不是通过反射实现的。所以，也就不会发生由于反序列化导致的单例破坏问题。这部分内容在<a href="http://www.hollischuang.com/archives/197">深度分析Java的枚举类型—-枚举的线程安全性及序列化问题</a>中也有更加详细的介绍，还展示了部分代码，感兴趣的朋友可以前往阅读。   </p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在所有的单例实现方式中，枚举是一种在代码写法上最简单的方式，之所以代码十分简洁，是因为Java给我们提供了<code>enum</code>关键字，我们便可以很方便的声明一个枚举类型，而不需要关心其初始化过程中的线程安全问题，因为枚举类在被虚拟机加载的时候会保证线程安全的被初始化。</p><p>除此之外，在序列化方面，Java中有明确规定，枚举的序列化和反序列化是有特殊定制的。这就可以避免反序列化过程中由于反射而导致的单例被破坏问题。  </p><p>(全文完)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们知道，单例模式，一般有七种写法，那么这七种写法中，最好的是哪一种呢？为什么呢？本文就来抽丝剥茧一下。  &lt;/p&gt;
&lt;h3 id=&quot;哪种写单例的方式最好&quot;&gt;&lt;a href=&quot;#哪种写单例的方式最好&quot; class=&quot;headerlink&quot; title=&quot;哪种写单例的方式最好
      
    
    </summary>
    
    
    
      <category term="转载" scheme="https://xuanxiaoming.info/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>关于canvas全屏的问题</title>
    <link href="https://xuanxiaoming.info/2016/12/11/%E5%85%B3%E4%BA%8Ecanvas%E5%85%A8%E5%B1%8F%E7%9A%84%E9%97%AE%E9%A2%98"/>
    <id>https://xuanxiaoming.info/2016/12/11/%E5%85%B3%E4%BA%8Ecanvas%E5%85%A8%E5%B1%8F%E7%9A%84%E9%97%AE%E9%A2%98</id>
    <published>2016-12-11T09:42:58.000Z</published>
    <updated>2022-03-01T19:27:19.245Z</updated>
    
    <content type="html"><![CDATA[<p>刚上手canvas，被它的全屏问题，搞到头疼，最后解决了，非常激动。</p><p>关于canvas全屏，实际上要知道两样东西。</p><ul><li>canvas等比缩放</li><li>canvas拉伸  </li></ul><br>  <h3 id="1-等比缩放"><a href="#1-等比缩放" class="headerlink" title="1 等比缩放"></a>1 等比缩放</h3><p>方法一：<code>&lt;canvas width=&quot;500&quot; height=&quot;500&quot;&gt;&lt;/canvas&gt;</code></p><p>方法二：使用HTML5 Canvas API操作 </p><pre><code>var canvas = document.getElementById(&apos;canvas的id&apos;);canvas.width = 500;canvas.height= 500;</code></pre><p>以上方法设置宽高会以300*150的比例缩小扩大。<br><br></p><h3 id="2-拉伸"><a href="#2-拉伸" class="headerlink" title="2 拉伸"></a>2 拉伸</h3><p>若通过如下方法设置宽高，Canvas元素将由原来大小被拉伸到所设置的宽高。  </p><p>方法一：使用CSS 会被拉伸  </p><pre><code>#canvas的id｛    width:1000px;    height:1000px;｝</code></pre><p>方法二：使用HTML5 样式操作 会被拉伸  </p><pre><code>var canvas = document.getElementById(&apos;canvas的id&apos;);canvas.style.width = window.innerWidth + &quot;px&quot;;canvas.style.height = window.innerHeight + &quot;px&quot;;</code></pre><p>方法三 ：用jquery的<code>$(&quot;#id&quot;).width(500)</code>会被拉伸  </p><p>其它：canvas的width和height也不能用百分比表示。canvas会将百分值当成数值显示。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刚上手canvas，被它的全屏问题，搞到头疼，最后解决了，非常激动。&lt;/p&gt;
&lt;p&gt;关于canvas全屏，实际上要知道两样东西。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;canvas等比缩放&lt;/li&gt;
&lt;li&gt;canvas拉伸  &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;  

&lt;h3 id=&quot;1
      
    
    </summary>
    
    
    
      <category term="前端" scheme="https://xuanxiaoming.info/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse启动错误：A Java Runtime Environment(JRE) or Java Development Kit(JDK) must be available……</title>
    <link href="https://xuanxiaoming.info/2016/10/30/eclipse%E5%90%AF%E5%8A%A8%E9%94%99%E8%AF%AF"/>
    <id>https://xuanxiaoming.info/2016/10/30/eclipse%E5%90%AF%E5%8A%A8%E9%94%99%E8%AF%AF</id>
    <published>2016-10-30T08:10:11.000Z</published>
    <updated>2022-03-01T19:27:19.227Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是一篇来自2016年我发布在CSDN博客上的博文，CSDN博客已经被我抛弃已久，本以为再无瓜葛，直到我前几天收到一份邮件说有新评论的内容，我才又去登录看了一下，发现这篇博文已被访问了近2万次，所以我决定将其搬运到我的新博客中。<br>已经很久没用Eclipse了，如果有人突然问我问题，我可能一时没法解决。</p></blockquote><pre><code>---------------------------Eclipse---------------------------A Java Runtime Environment (JRE) or Java Development Kit(JDK)must be available in order to run Eclipse. No Java virtualmachinewas found after searching the following locations:D:\eclipse\jre\bin\javaw.exejavaw.exe in your current PATH---------------------------确定   ---------------------------  </code></pre><p>解决这个问题前，先要明确自己的JAVA安装和环境变量配置没错。</p><p>我用的第一种解决办法是按照报错信息，手动填补出了一个D:\eclipse\jre\bin\javaw.exe（javaw.exe文件可以从jdk的bin目录下找到），Eclipse可以正常打开。</p><p>以上办法不是正规的解决办法，所以为了防止未知问题，我最后是拿第二种解决办法解决的。<br>打开Eclipse根目录eclipse.ini文件，在最前面加上两行：<br>-vm<br>C:\ProgramFiles\Java\jdk1.8.0_45\bin\javaw.exe（这个是你安装的javaw.exe的绝对路径）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这是一篇来自2016年我发布在CSDN博客上的博文，CSDN博客已经被我抛弃已久，本以为再无瓜葛，直到我前几天收到一份邮件说有新评论的内容，我才又去登录看了一下，发现这篇博文已被访问了近2万次，所以我决定将其搬运到我的新博客中。&lt;br&gt;已经很久没用
      
    
    </summary>
    
    
    
      <category term="IDE" scheme="https://xuanxiaoming.info/tags/ide/"/>
    
  </entry>
  
</feed>
