{"tags":[{"name":"运维","permalink":"https://xuanxiaoming.github.io/tags/%E8%BF%90%E7%BB%B4/","url":"/async/tags/运维.json","count":4}],"categories":[],"url":"/async/posts/2022/01/18/playbook详解.json","date":1642481478000,"path":{"year":2022,"month":1,"day":18,"name":"playbook详解"},"title":"playbook详解","permalink":"https://xuanxiaoming.github.io/2022/01/18/playbook%E8%AF%A6%E8%A7%A3/","content":"<h1 id=\"Playbook详解\"><a href=\"#Playbook详解\" class=\"headerlink\" title=\"Playbook详解\"></a>Playbook详解</h1><p>playbook由一个或多个“plays”组成。它的内容是一个以“plays”为元素的列表。</p>\n<p>在ansible中，play的内容被称为tasks（任务）。在基本层次的应用中，一个任务是一个对ansible模块的调用。</p>\n<p>通过playbook，可以编排步骤进行多机器的部署，比如在webservers组的所有机器上运行一定的步骤，然后在database server组运行一些步骤，最后回到webservers组，再运行一些步骤，诸如此类。</p>\n<pre class=\"line-numbers language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\" spellcheck=\"true\"># 例如</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span> webservers\n  <span class=\"token key atrule\">vars</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">http_port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token key atrule\">max_clients</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>\n  <span class=\"token key atrule\">remote_user</span><span class=\"token punctuation\">:</span> root\n  <span class=\"token key atrule\">tasks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ensure apache is at the latest version\n    <span class=\"token key atrule\">yum</span><span class=\"token punctuation\">:</span> pkg=httpd state=latest\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> write the apache config file\n    <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> src=/srv/httpd.j2 dest=/etc/httpd.conf\n    <span class=\"token key atrule\">notify</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> restart apache\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ensure apache is running\n    <span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> name=httpd state=started\n  <span class=\"token key atrule\">handlers</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> restart apache\n      <span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> name=httpd state=restarted<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"主机和用户\"><a href=\"#主机和用户\" class=\"headerlink\" title=\"主机和用户\"></a>主机和用户</h2><p>hosts行的内容是一个或多个组或主机的patterns，以逗号为分隔符；remote_user就是账户名（在Ansible 1.4以后才改为 remote_user。主要为了不跟user模块混淆，user 模块用于在远程系统上创建用户）</p>\n<pre class=\"line-numbers language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\" spellcheck=\"true\"># 支持sudo执行命令</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span> webservers\n  <span class=\"token key atrule\">remote_user</span><span class=\"token punctuation\">:</span> yourname\n  <span class=\"token key atrule\">sudo</span><span class=\"token punctuation\">:</span> yes\n\n<span class=\"token comment\" spellcheck=\"true\"># 也可以仅在一个task中使用sudo执行命令，而不是在整个play中使用sudo</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span> webservers\n  <span class=\"token key atrule\">remote_user</span><span class=\"token punctuation\">:</span> yourname\n  <span class=\"token key atrule\">tasks</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> name=nginx state=started\n      <span class=\"token key atrule\">sudo</span><span class=\"token punctuation\">:</span> yes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Tasks列表\"><a href=\"#Tasks列表\" class=\"headerlink\" title=\"Tasks列表\"></a>Tasks列表</h2><p>每一个play包含了一个task列表（任务列表）。一个task在其所对应的所有主机上执行完毕之后，下一个task才会执行。有一点需要明白的是，在一个play之中，所有hosts会获取相同的任务指令，这是play的一个目的所在，也就是会将所有选出的hosts映射上task。</p>\n<p>每个task的目标在于执行一个moudle，通常是带有特定的参数来执行。在参数中可以使用变量（variables）。</p>\n<p>modules具有“幂等”性，意思是如果你再一次地执行moudle，moudle只会执行必要的改动，只会改变需要改变的地方。所以重复多次执行playbook也很安全。</p>\n<blockquote>\n<p>为什么使用module而不是打包一套shell放在机器上运行？</p>\n<p>答：为了幂等性，将tasks交给ansible控制，不至于多次执行tasks进行重复操作，从而降低风险。当然使用shell也有办法解决幂等性，但远不如这样更加直观。</p>\n</blockquote>\n<p>每一个task必须有一个名称name，这样在运行playbook时，从其输出的任务执行信息中可以很好的辨别出是属于哪一个task的。如果没有定义name，“action”的值将会用作输出信息中标记特定的task。</p>\n<pre class=\"line-numbers language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\" spellcheck=\"true\"># 基本的task的定义</span>\n<span class=\"token key atrule\">tasks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> make sure apache is running\n    <span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> name=httpd state=running<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>比较特别的两个modudle是command和shell，它们不使用key=value格式的参数，而是这样：</p>\n<pre class=\"line-numbers language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">tasks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> disable selinux\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> /sbin/setenforce 0\n\n\n<span class=\"token key atrule\">tasks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> run this command and ignore the result\n    <span class=\"token key atrule\">shell</span><span class=\"token punctuation\">:</span> /usr/bin/somecommand\n    <span class=\"token key atrule\">ignore_errors</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Action-Shorthand\"><a href=\"#Action-Shorthand\" class=\"headerlink\" title=\"Action Shorthand\"></a>Action Shorthand</h2><p>新版ansible更喜欢使用如下的格式列出modules：</p>\n<pre class=\"line-numbers language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> src=templates/foo.j2 dest=/etc/foo.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"Handlers-在发生改变时执行的操作\"><a href=\"#Handlers-在发生改变时执行的操作\" class=\"headerlink\" title=\"Handlers: 在发生改变时执行的操作\"></a>Handlers: 在发生改变时执行的操作</h2><p>module 具有”幂等”性,所以当远端系统被人改动时，可以重放playbooks达到恢复的目的。playbooks本身可以识别这种改动，并且有一个基本的event system（事件系统），可以响应这种改动。</p>\n<p>（当发生改动时）‘notify’ actions会在playbook的每一个task结束时被触发，而且即使有多个不同的task通知改动的发生，‘notify’ actions只会被触发一次。</p>\n<p>举例来说，比如多个resources指出因为一个配置文件被改动，所以apache需要重新启动，但是重新启动的操作只会被执行一次。</p>\n<pre class=\"line-numbers language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\" spellcheck=\"true\"># ‘notify’ 下列出的即是handlers</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> template configuration file\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> src=template.j2 dest=/etc/foo.conf\n  <span class=\"token key atrule\">notify</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> restart memcached\n     <span class=\"token punctuation\">-</span> restart apache<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Handlers也是一些task的列表，通过名字来引用，它们和一般的task并没有什么区别。Handlers是由通知者进行notify, 如果没有被notify，handlers不会执行。不管有多少个通知者进行了notify，等到play中的所有task执行完成之后，handlers也只会被执行一次。</p>\n<pre class=\"line-numbers language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\" spellcheck=\"true\"># 这是一个handlers的示例:</span>\n<span class=\"token key atrule\">handlers</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> restart memcached\n      <span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span>  name=memcached state=restarted\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> restart apache\n      <span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> name=apache state=restarted<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>handlers 最佳的应用场景是用来重启服务，或者触发系统重启操作。除此以外很少用到了。</p>\n<p>handlers 会按照声明的顺序执行</p>\n</blockquote>\n<p>如果你想立即执行所有的handler命令，在1.2及以后的版本，你可以这样做:</p>\n<pre class=\"line-numbers language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\" spellcheck=\"true\"># 任何在排队等候的handlers会在执行到‘meta’部分时，优先执行</span>\n<span class=\"token key atrule\">tasks</span><span class=\"token punctuation\">:</span>\n   <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">shell</span><span class=\"token punctuation\">:</span> some tasks go here\n   <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">meta</span><span class=\"token punctuation\">:</span> flush_handlers\n   <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">shell</span><span class=\"token punctuation\">:</span> some other tasks<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"执行Playbook\"><a href=\"#执行Playbook\" class=\"headerlink\" title=\"执行Playbook\"></a>执行Playbook</h2><pre class=\"line-numbers language-shell\"><code class=\"language-shell\"># 运行10个并发的playbook\n> ansible-playbook playbook.yml -f 10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"Playbook基本结构\"><a href=\"#Playbook基本结构\" class=\"headerlink\" title=\"Playbook基本结构\"></a>Playbook基本结构</h2><pre class=\"line-numbers language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\" spellcheck=\"true\"># [···] 表示可选配置</span>\n\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">[</span>vars<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">remote_user</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">[</span>yum/template/service/<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">[</span>notify<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">[</span>handlers<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span>\n    service<span class=\"token punctuation\">:</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"}