{"tags":[{"name":"数据库","permalink":"https://xuanxiaoming.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/","url":"/async/tags/数据库.json","count":2},{"name":"MySQL","permalink":"https://xuanxiaoming.github.io/tags/mysql/","url":"/async/tags/MySQL.json","count":1}],"categories":[],"url":"/async/posts/2021/11/15/m1芯片安装docker-mysql.json","date":1636967337000,"path":{"year":2021,"month":11,"day":15,"name":"m1芯片安装docker-mysql"},"title":"m1芯片安装docker-mysql","permalink":"https://xuanxiaoming.github.io/2021/11/15/m1%E8%8A%AF%E7%89%87%E5%AE%89%E8%A3%85docker-mysql/","content":"<h2 id=\"m1芯片安装docker-mysql\"><a href=\"#m1芯片安装docker-mysql\" class=\"headerlink\" title=\"m1芯片安装docker-mysql\"></a>m1芯片安装docker-mysql</h2><p>自己平时是不喜欢直接在机器上安装mysql的，因为碎片文件比较多，删除mysql的时候会非常麻烦，得不厌其烦的寻找并删除碎片文件。直到我遇到了docker，我才觉得找到了答案，直接在docker上启动一个mysql服务，用可视化工具做远程连接就好，删除也没有负担，随时随地都可以重新准备就绪。</p>\n<p>但是最近我在新电脑上启动docker-mysql时发现docker官方容器并不支持apple m1芯片，找了很长时间才找到一个由mysql官方维护的容器是支持的，于是就开始尝试使用这个容器。</p>\n<p>在使用过程中，我发现一个问题就是我的DataGrid怎么也连不上mysql服务，一直提示 <code>[HY000][1130] null, message from server: &quot;Host &#39;172.17.0.1&#39; is not allowed to connect to this MySQL server&quot;.</code>。研究了很长时间，发现原因是该容器是mysql-server，可以理解为运行着mysql的服务器，所以本地连接的时候相当于远程访问，也就是说需要进容器内打开mysql的远程登录，并授予用户远程登录权限。</p>\n<p>具体操作如下：</p>\n<ol>\n<li><p>启动mysql-server容器（可以加-v将宿主机卷空间挂载进去，用于备份数据库）</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">docker run --name=mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql/mysql-server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>使用改表法为用户增加访问权限docker exec进容器内，找到mysql库下的user表，将其hosts从localhost改成%或远程主机的IP（我这里是个人机器上使用就改root用户，具体请酌情考虑）</p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\">mysql <span class=\"token operator\">-</span>uroot <span class=\"token operator\">-</span>proot\n\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">use</span> mysql<span class=\"token punctuation\">;</span>\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">select</span> host<span class=\"token punctuation\">,</span><span class=\"token keyword\">user</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span>\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">update</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">set</span> host<span class=\"token operator\">=</span><span class=\"token string\">\"%\"</span> <span class=\"token keyword\">where</span> <span class=\"token keyword\">user</span><span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">select</span> host<span class=\"token punctuation\">,</span><span class=\"token keyword\">user</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>上述内容修改完后，就可以退出容器里，最后重启容器即可</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">docker restart mysql-server;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<p>以上步骤都做完后，即可使用可视化工具远程访问mysql服务。最后需要注意的一点是，远程访问最好设置 <code>useSSL=true</code>，打开安全传输。</p>\n"}