{"tags":[{"name":"数据库","permalink":"https://xuanxiaoming.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/","url":"/async/tags/数据库.json","count":3}],"categories":[],"url":"/async/posts/2021/11/02/数据库笔记.json","date":1635816947000,"path":{"year":2021,"month":11,"day":2,"name":"数据库笔记"},"title":"数据库笔记","permalink":"https://xuanxiaoming.github.io/2021/11/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/","content":"<h1 id=\"数据库相关\"><a href=\"#数据库相关\" class=\"headerlink\" title=\"数据库相关\"></a>数据库相关</h1><h3 id=\"数据库三大范式\"><a href=\"#数据库三大范式\" class=\"headerlink\" title=\"数据库三大范式\"></a>数据库三大范式</h3><h3 id=\"数据库事务的四个特性\"><a href=\"#数据库事务的四个特性\" class=\"headerlink\" title=\"数据库事务的四个特性\"></a>数据库事务的四个特性</h3><p>事务具有四个特性:原子性(Atomicity)、一致性(Consistency)、隔离性(Isolation)、持久性(Durability)。这四个特性简称为ACID原则。</p>\n<ol>\n<li><p>原子性</p>\n<p>事务必须是原子工作单元,事务中的操作要么全部执行,要么全都不执行,不能只完成部分操作。原子性在数据库系统中由恢复机制来实现。</p>\n</li>\n<li><p>一致性</p>\n<p>事务开始之前,数据库处于一致性的状态;事务结束后,数据库必须仍处于一致性状态。数据库一致性的定义是由用户负责的。例如,在银行转账中,用户可以定义转账前后两个账户金额之和保持不变。</p>\n</li>\n<li><p>隔离性</p>\n<p>系统必须保证事务不受其他并发执行事务的影响,即当多个事务同时运行时,各事务之间相互隔离,不可互相干扰。事务查看数据时数据所处的状态,要么是另一个并发事务修改它之前的状态,要么是另一个并发事务修改它之后的状态,事务不会查看中间状态的数据。隔离性通过系统的并发控制机制实现。</p>\n</li>\n<li><p>持久性</p>\n<p>一个已完成的事务对数据所做的任何变动在系统中是永久有效的,即使该事务产生的修改不正确,错误也将一直保持。持久性通过恢复机制实现,发生故障时,可以通过日志等手段恢复数据库信息。</p>\n</li>\n</ol>\n<h3 id=\"数据库事务的作用\"><a href=\"#数据库事务的作用\" class=\"headerlink\" title=\"数据库事务的作用\"></a>数据库事务的作用</h3><p>当我们需要批量执行sql语句修改多条数据时，为了确保数据的一致性（比如张三给李四转账100元，张三的金额-100，李四金额+100），必须加入事务的使用用以在完整且正确执行完所有sql操作后，再提交对数据的修改。</p>\n<p>假设当执行完第一条sql后突然断电引发操作异常，在没有执行commit之前，数据均不会修改。</p>\n<h3 id=\"数据库锁\"><a href=\"#数据库锁\" class=\"headerlink\" title=\"数据库锁\"></a>数据库锁</h3><p>主要有：<strong>表级锁</strong>和<strong>行级锁</strong></p>\n<ol>\n<li><p>读锁</p>\n<p>可以并发读，但不可以并发写。读锁期间，没释放锁前不能进行写操作。</p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">lock</span> <span class=\"token keyword\">table</span> <span class=\"token punctuation\">[</span>TableName<span class=\"token punctuation\">]</span> <span class=\"token keyword\">read</span><span class=\"token punctuation\">;</span>\n\nunlock <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>写锁</p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">lock</span> <span class=\"token keyword\">table</span> <span class=\"token punctuation\">[</span>TableName<span class=\"token punctuation\">]</span> <span class=\"token keyword\">write</span><span class=\"token punctuation\">;</span>\n\nunlock <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n"}