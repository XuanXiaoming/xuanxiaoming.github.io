{"tags":[{"name":"数据库","permalink":"https://xuanxiaoming.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/","url":"/async/tags/数据库.json","count":3}],"categories":[],"url":"/async/posts/2021/11/02/数据库笔记.json","date":1635816947000,"path":{"year":2021,"month":11,"day":2,"name":"数据库笔记"},"title":"数据库笔记","permalink":"https://xuanxiaoming.github.io/2021/11/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/","content":"<h1 id=\"数据库三大范式\"><a href=\"#数据库三大范式\" class=\"headerlink\" title=\"数据库三大范式\"></a>数据库三大范式</h1><ol>\n<li><p><strong>第一范式(确保每列保持原子性)</strong></p>\n<p> 第一范式是最基本的范式。如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。</p>\n <br>\n</li>\n<li><p><strong>第二范式(确保表中的每列都和主键相关)</strong></p>\n<p> 第二范式在第一范式的基础之上更进一层。第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。也就是说在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。</p>\n<p> 比如要设计一个订单信息表，因为订单中可能会有多种商品，所以要将订单编号和商品编号作为数据库表的联合主键。这样就产生一个问题：这个表中是以订单编号和商品编号作为联合主键。这样在该表中商品名称、单位、商品价格等信息不与该表的主键相关，而仅仅是与商品编号相关。</p>\n<p> 所以在这里违反了第二范式的设计原则。而如果把这个订单信息表进行拆分，把商品信息分离到另一个表中，把订单项目表也分离到另一个表中，就非常完美了。</p>\n <br>\n</li>\n<li><p><strong>第三范式(确保每列都和主键列直接相关,而不是间接相关)</strong></p>\n<p> 第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</p>\n<p> 比如在设计一个订单数据表的时候，可以将客户编号作为一个外键和订单表建立相应的关系。而不可以在订单表中添加关于客户其它信息（比如姓名、所属公司等）的字段。</p>\n</li>\n</ol>\n<h1 id=\"数据库事务的四个特性\"><a href=\"#数据库事务的四个特性\" class=\"headerlink\" title=\"数据库事务的四个特性\"></a>数据库事务的四个特性</h1><p>事务具有四个特性:原子性(Atomicity)、一致性(Consistency)、隔离性(Isolation)、持久性(Durability)。这四个特性简称为ACID原则。</p>\n<ol>\n<li><p><strong>原子性</strong></p>\n<p> 事务必须是原子工作单元,事务中的操作要么全部执行,要么全都不执行,不能只完成部分操作。原子性在数据库系统中由恢复机制来实现。</p>\n <br>\n</li>\n<li><p><strong>一致性</strong></p>\n<p> 事务开始之前,数据库处于一致性的状态;事务结束后,数据库必须仍处于一致性状态。数据库一致性的定义是由用户负责的。例如,在银行转账中,用户可以定义转账前后两个账户金额之和保持不变。</p>\n <br>\n</li>\n<li><p><strong>隔离性</strong></p>\n<p> 系统必须保证事务不受其他并发执行事务的影响,即当多个事务同时运行时,各事务之间相互隔离,不可互相干扰。事务查看数据时数据所处的状态,要么是另一个并发事务修改它之前的状态,要么是另一个并发事务修改它之后的状态,事务不会查看中间状态的数据。隔离性通过系统的并发控制机制实现。</p>\n <br>\n</li>\n<li><p><strong>持久性</strong></p>\n<p> 一个已完成的事务对数据所做的任何变动在系统中是永久有效的,即使该事务产生的修改不正确,错误也将一直保持。持久性通过恢复机制实现,发生故障时,可以通过日志等手段恢复数据库信息。</p>\n</li>\n</ol>\n<h1 id=\"数据库事务的作用\"><a href=\"#数据库事务的作用\" class=\"headerlink\" title=\"数据库事务的作用\"></a>数据库事务的作用</h1><p>当我们需要批量执行sql语句修改多条数据时，为了确保数据的一致性（比如张三给李四转账100元，张三的金额-100，李四金额+100），必须加入事务的使用用以在完整且正确执行完所有sql操作后，再提交对数据的修改。</p>\n<p>假设当执行完第一条sql后突然断电引发操作异常，在没有执行commit之前，数据均不会修改。</p>\n<h1 id=\"数据库锁\"><a href=\"#数据库锁\" class=\"headerlink\" title=\"数据库锁\"></a>数据库锁</h1><p>主要有：<strong>表级锁</strong>和<strong>行级锁</strong></p>\n<ol>\n<li><p>读锁</p>\n<p>可以并发读，但不可以并发写。读锁期间，没释放锁前不能进行写操作。</p>\n<pre class=\"line-numbers language-SQL\"><code class=\"language-SQL\">lock table [TableName] read;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ol>\n<p>unlock tables;</p>\n<pre><code>\n\n2. 写锁\n\n  ```SQL\nlock table [TableName] write;\n\nunlock tables;</code></pre>"}