{"tags":[{"name":"运维","permalink":"https://xuanxiaoming.github.io/tags/%E8%BF%90%E7%BB%B4/","url":"/async/tags/运维.json","count":4},{"name":"linux","permalink":"https://xuanxiaoming.github.io/tags/linux/","url":"/async/tags/linux.json","count":3}],"categories":[],"url":"/async/posts/2022/11/07/linux系统检查与故障诊断.json","date":1667754454000,"path":{"year":2022,"month":11,"day":7,"name":"linux系统检查与故障诊断"},"title":"Linux系统检查与故障诊断","permalink":"https://xuanxiaoming.github.io/2022/11/07/linux%E7%B3%BB%E7%BB%9F%E6%A3%80%E6%9F%A5%E4%B8%8E%E6%95%85%E9%9A%9C%E8%AF%8A%E6%96%AD/","content":"<h2 id=\"硬件信息检查\"><a href=\"#硬件信息检查\" class=\"headerlink\" title=\"硬件信息检查\"></a>硬件信息检查</h2><h3 id=\"dmesg\"><a href=\"#dmesg\" class=\"headerlink\" title=\"dmesg\"></a>dmesg</h3><p><strong>功能说明</strong>：显示开机信息。显示系统运行时硬件的检测或者断开连接信息。</p>\n<blockquote>\n<p>使用前注意权限问题，内核日志是限制非管理员权限阅读的。遇到 <code>dmesg: read kernel buffer failed: Permission denied</code>，先修改权限，使用命令<code>sudo sysctl -w kernel.dmesg_restrict=0</code>  <br><br>在ubuntu 20.1以上版本中，还可以更改 <code>/etc/sysctl.d/10-kernel-hardening.conf</code> 中的配置 <code>kernel.dmesg_restrict=0</code>，再执行 <code>sudo service procps restart</code> 使其生效。<br><br>另外如果是docker容器中，修改权限会遇到 <code>sysctl: setting key &quot;kernel.yama.ptrace_scope&quot;, ignoring: Read-only file system</code>，解决办法请参考 <a href=\"http://fleey.cn/archives/108.html\" target=\"_blank\" rel=\"noopener\">http://fleey.cn/archives/108.html</a></p>\n</blockquote>\n<br>\ndmesg 命令显示 linux 内核的环形缓冲区信息，我们可以从中获得诸如系统架构、cpu、挂载的硬件，RAM等多个运行级别的大量的系统信 息。当计算机启动时，系统内核（操作系统的核心部分）将会被加载到内存中。在加载的过程中会显示很多的信息，在这些信息中我们可以看到内核检测硬件设备。    \n<br><br>\ndmesg 命令用于设备故障的诊断是非常重要的。进行硬件的连接或断开连接操作时，在 dmesg 命令的帮助下，我们可以看到硬件的检测或者断开连接的信息。dmesg 命令在多数基于Linux和Unix的操作系统中都可以使用。\n<br><br>  \n\n<p><strong>常用</strong>  </p>\n<ol>\n<li>查看网卡启动信息 <code>dmesg | grep eth</code></li>\n<li>列出所有被检测到的硬件 <code>dmesg | grep sda</code></li>\n<li>清空dmesg缓冲区日志 <code>dmesg -c</code>， 即使清除了缓冲区数据也可以查看日志文件，文件保存在 <code>/var/log/dmesg</code></li>\n<li>监控硬件变化 <code>dmesg | tail -20</code></li>\n</ol>\n<h3 id=\"lshw\"><a href=\"#lshw\" class=\"headerlink\" title=\"lshw\"></a>lshw</h3><p><strong>功能说明</strong>：检查全部硬件信息</p>\n<p>需要安装软件包  </p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">apt install -y lshw<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"lspci\"><a href=\"#lspci\" class=\"headerlink\" title=\"lspci\"></a>lspci</h3><p><strong>功能说明</strong>：检查PCI设备</p>\n<p>需要安装软件包  </p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">apt install -y lshw<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"lsusb\"><a href=\"#lsusb\" class=\"headerlink\" title=\"lsusb\"></a>lsusb</h3><p><strong>功能说明</strong>：检查USB设备</p>\n<br>   \n\n<h2 id=\"网络检查\"><a href=\"#网络检查\" class=\"headerlink\" title=\"网络检查\"></a>网络检查</h2><h3 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h3><p><strong>功能说明</strong>：查看进程打开的文件、目录，以及查看进程监听的端口等 socket 相关的信息  </p>\n<p>需要安装软件包</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">apt install -y lsof<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>检查结果解释：</p>\n<ol>\n<li>COMMAND：程序的名称</li>\n<li>PID：进程标识符</li>\n<li>USER：进程所有者</li>\n<li>FD：文件描述符，应用程序通过文件描述符识别该文件<br>FD 列中的常见内容有 cwd、rtd、txt、mem 和一些数字等等。<br>其中 cwd 表示当前的工作目录；rtd 表示根目录；txt 表示程序的可执行文件；mem 表示内存映射文件；标准输入输出文件通常以数字表示。</li>\n<li>TYPE：文件类型，如 DIR、REG 等<br>REG 和 DIR 分别表示普通文件和目录。</li>\n<li>DEVICE：以逗号分隔设备编号</li>\n<li>SIZE：文件的大小(bytes)</li>\n<li>NODE：索引节点(文件在磁盘上的标识)</li>\n<li>NAME：打开文件的确切名称  </li>\n</ol>\n<p><strong>常用</strong>：</p>\n<ol>\n<li>查看哪些进程打开了某个文件或设备<br>直接指定文件（设备）的名称作为 lsof 的参数就可以查看哪些进程打开了这个文件（设备），例：<code>lsof /bin/bash</code> 或 <code>lsof /dev/sda1</code></li>\n<li>查看哪些进程打开了某个目录及目录下的文件<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> lsof +d /var/log  #不递归查询\n lsof +D /var/log  #递归查询<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>查看某个进程打开的所有文件<br>先用ps查询进程的PID，再用lsof查询，用bash举例<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> ps -C bash\n lsof -p bash的PID<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>复杂查询条件<ul>\n<li>使用 <code>-a</code> 参数，使查询组合多个条件</li>\n<li><code>-c</code> 使多条件为或的关系</li>\n<li>对条件取反，则直接在条件前加 <code>^</code></li>\n<li>另外也可以使用正则表达式，使用 <code>/</code> 包裹表达式</li>\n</ul>\n</li>\n<li>只列出 IPv4 或 IPv6 打开的文件<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> lsof -i 4  #IPv4\n lsof -i 6  #IPv6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li>列出与某端口相关的文件，例：<code>lsof -i:22</code></li>\n<li>列出指定范围内被打开的 TCP 端口，例：<code>lsof -i TCP:1-1024</code></li>\n<li>查看某个用户打开的所有文件，例：<code>lsof -u root</code></li>\n</ol>\n<h3 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h3><p><strong>功能说明</strong>：显示各种网络相关信息，如网络连接，路由表，接口状态 (Interface Statistics)，masquerade 连接，多播成员 (Multicast Memberships) 等等。</p>\n<p><strong>常用</strong>：</p>\n<ol>\n<li>列出所有端口 <code>netstat -a</code>，默认不显示监听状态栏</li>\n<li>列出所有 tcp 端口 <code>netstat -at</code></li>\n<li>列出所有 udp 端口 <code>netstat -au</code></li>\n<li>列出所有监听端口 <code>netstat -l</code></li>\n<li>列出特定进程的使用端口 <code>netstat -p [PID]</code></li>\n<li>持续输出 netstat 信息 <code>netstat -c</code></li>\n<li>显示核心路由信息 <code>netstat -r</code></li>\n<li>显示网络接口列表 <code>netstat -i</code></li>\n</ol>\n<blockquote>\n<p><strong>什么是监听端口</strong><br>首先了解一下TCP/IP协议中的端口指的是什么？如果把IP地址比作一间房子 ，端口就是出入这间房子的门。真正的房子只有一个或者几个门，但是一个IP地址下的端口可以有65536（即：256×256）个之多！端口是通过端口号来标记的，端口号只有整数，范围是从0到65535（256×256-1）。<br><br>在互联网上主机与主机之间通过TCP/IP协议发送和接收数据包，各个数据包根据其目的主机IP地址来进行路由。当数据包顺利的被传送到目的主机后，它要如何进入主机呢？当然是要通过端口(现实中的门)进入了。我们知道大多数操作系统都支持多应用程序（多进程）同时运行，不同的应用具有不同的处理功能，那么目的主机应该把接收到的数据包传送给哪一个应用程序呢？这就要靠端口了，一个应用对应一个或多个端口，这样我们就可以把数据包传递给对应的程序了。这就是监听端口的由来。<br><br>同一个端口只能被一个应用程序使用。如果多个应用使用了相同端口，就会出现端口冲突问题。这种情况通常我们不需要担心，因为端口冲突会导致应用程序无法启动。</p>\n</blockquote>\n<h3 id=\"tcpdump\"><a href=\"#tcpdump\" class=\"headerlink\" title=\"tcpdump\"></a>tcpdump</h3><p><strong>功能说明</strong>：根据使用者的定义对网络上的数据包进行截获的包分析工具。支持与或非逻辑语句帮助筛选信息。  </p>\n<p>需要安装软件包</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">apt install -y tcpdump<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>输出信息的描述:   </p>\n<ul>\n<li>时间精确到微秒</li>\n<li>localhost.42333 &gt; localhost.9501 表示通信的流向</li>\n<li>[S] 表示这是一个SYN请求</li>\n<li>[.] 表示这是一个ACK确认包，(client)SYN-&gt;(server)SYN-&gt;(client)ACK 就是3次握手过程</li>\n<li>[P] 表示这个是一个数据推送，可以是从服务器端向客户端推送，也可以从客户端向服务器端推</li>\n<li>[F] 表示这是一个FIN包，是关闭连接操作，client/server都有可能发起</li>\n<li>[R] 表示这是一个RST包，与F包作用相同，但RST表示连接关闭时，仍然有数据未被处理。可以理解为是强制切断连接</li>\n<li>win 342是指滑动窗口大小</li>\n<li>length 12指数据包的大小  </li>\n</ul>\n<p>查看数据包的详细信息，使用 <code>-XX -vvv -nn</code>：</p>\n<ul>\n<li><code>-v</code> 当分析和打印的时候，产生详细的输出。</li>\n<li><code>-vv</code> 产生比-v更详细的输出。</li>\n<li><code>-vvv</code> 产生比-vv更详细的输出。</li>\n<li><code>-XX</code> 输出包的头部数据，会以16进制和ASCII两种方式同时输出。</li>\n<li><code>-nn</code> 直接以IP以及PORT number显示，而非主机名与服务名称。</li>\n</ul>\n<p><strong>常用</strong>：  </p>\n<ol>\n<li>监视指定主机的数据包 <code>tcpdump host 主机IP</code></li>\n<li>截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信 <code>tcpdump host 210.27.48.1 and \\(210.27.48.2 or 210.27.48.3 \\)</code></li>\n<li>获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包 <code>tcpdump ip host 210.27.48.1 and ! 210.27.48.2</code></li>\n<li>监视指定主机和端口的数据包 <code>tcpdump tcp port 23 and host 210.27.48.1</code></li>\n<li>对本机的UDP 222端口进行监视 <code>tcpdump udp port 222</code>  </li>\n<li>检查数据包的详细信息：</li>\n</ol>\n<br>\n\n<h2 id=\"系统模块检查\"><a href=\"#系统模块检查\" class=\"headerlink\" title=\"系统模块检查\"></a>系统模块检查</h2><h3 id=\"lsmod\"><a href=\"#lsmod\" class=\"headerlink\" title=\"lsmod\"></a>lsmod</h3><p><strong>功能说明</strong>：检查当前内核已经加载的模块和驱动</p>\n<p>需要安装软件包  </p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">apt install -y kmod<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>检查结果通常有三列，分别是： </p>\n<ol>\n<li>模块名称（Module）</li>\n<li>模块的大小（Size）</li>\n<li>此模块是否被其他模块使用（Used by）</li>\n</ol>\n<br>\n\n<h2 id=\"系统状态检查\"><a href=\"#系统状态检查\" class=\"headerlink\" title=\"系统状态检查\"></a>系统状态检查</h2><h3 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h3><p><strong>功能说明</strong>：显示指定的目录或文件所占用的磁盘空间</p>\n<p><strong>常用</strong>:</p>\n<ol>\n<li><code>du -h</code> 将空间大小换算成更易读的k、m、g</li>\n<li><code>du -D</code> 显示链接文件的原文件大小</li>\n</ol>\n<h3 id=\"df\"><a href=\"#df\" class=\"headerlink\" title=\"df\"></a>df</h3><p><strong>功能说明</strong>：显示目前在 Linux 系统上的文件系统磁盘使用情况统计</p>\n<p><strong>常用</strong>:</p>\n<ol>\n<li><code>df -h</code> 将空间大小换算成更易读的k、m、g</li>\n<li><code>du -a</code> 输出所有文件的磁盘用量，不仅仅是目录</li>\n<li><code>du -d</code> 仅当目录（或在 –all 选项启用时包括文件）层级不高于命令行参数指定的 N 层时输出对应目录或文件的对应大小</li>\n<li><code>du --time</code> 显示目录中或其子目录下所有文件的最后修改时间</li>\n</ol>\n<h3 id=\"tree\"><a href=\"#tree\" class=\"headerlink\" title=\"tree\"></a>tree</h3><p><strong>功能说明</strong>：以树状图形式列出目录的内容</p>\n<p><strong>常用</strong>：</p>\n<ol>\n<li><code>tree -a</code> 列出所有文件</li>\n<li><code>tree -d</code> 仅列出目录</li>\n<li><code>tree -f</code> 列出每个文件的完整路径</li>\n<li><code>tree -L 数字</code> 列出的目录深度</li>\n<li><code>tree --charset UTF8</code> 设置字符集，将来用于终端或HTML展示</li>\n<li><code>-u</code> 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码<br><code>-g</code> 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码</li>\n<li><code>tree -p</code> 列出文件权限</li>\n<li><code>tree -h</code> 将空间大小换算成更易读的k、m、g</li>\n<li><code>tree -D</code> 显示上次修改或状态更改的日期<br><code>--timefmt</code> 根据格式打印并格式化时间，例如：’%F %T’ 或 ‘%c’</li>\n<li><code>-v</code> 按字母排序<br><code>-t</code> 按最后修改的时间排序<br><code>-c</code> 按上次状态更改时间对文件排序<br><code>-r</code> 反转排序的顺序<br><code>--dirsfirst</code> 在文件之前列出目录</li>\n<li>输出：<br><code>-X</code> 打印出树的XML表示<br><code>-J</code> 打印出树的 JSON 表示<br><code>-H 根名</code> 输出为网页表示，参数为根名，会影响超链接，建议用 <code>.</code>；<code>-T 标题</code> 替换默认的 HTML 标题和 H1 标题，<code>--nolinks</code> 关闭 HTML 输出中的超链接</li>\n</ol>\n<h3 id=\"iostat\"><a href=\"#iostat\" class=\"headerlink\" title=\"iostat\"></a>iostat</h3><p><strong>功能说明</strong>：动态监视系统的磁盘操作活动</p>\n<h3 id=\"vmstat\"><a href=\"#vmstat\" class=\"headerlink\" title=\"vmstat\"></a>vmstat</h3><p><strong>功能说明</strong>：实时动态监视操作系统的虚拟内存、进程、CPU活动</p>\n<h3 id=\"free\"><a href=\"#free\" class=\"headerlink\" title=\"free\"></a>free</h3><p><strong>功能说明</strong>：显示内存的使用情况，包括实体内存，虚拟的交换文件内存，共享内存区段，以及系统核心使用的缓冲区等</p>\n"}